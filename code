#include <stdio.h>
#include <math.h>
#include <string.h>
#include <time.h>
#include <stdbool.h>
#include <stdlib.h>

/*    2016/10/26 18:00
const int N = 10000000; //申请的所需的大小，并应用为常量
*/

//    2016/10/27 11:46
const int N = 1250000;   //用每一位上的值来代表每一个数书不是素数
const int N2 = 10000000;
/*    2016/10/26 18:00
struct arry            //构建一个位域结构
{
	unsigned char a : 1;
};

struct arry B_arry[N + 1] = {0};     //全部清零
*/

//	   2016/10/27  11:46
unsigned char B_arry[N + 1] = {0};     //创建数组同时清零

/*这里采用埃拉托斯特尼筛法*/
/*复杂度是O(n log log n)*/
/*伪代码如下*/
/*Input: an integer n > 1
 
Let A be an array of Boolean values, indexed by integers 2 to n,
initially all set to true.
 
 for i = 2, 3, 4, ..., not exceeding √n:
  if A[i] is false:
    for j = i2, i2+i, i2+2i, i2+3i, ..., not exceeding n :
      A[j] := ture
 
Output: all i such that A[i] is true.*/

/*		2016/10/26 18:00 
int E_Judge()
{ 
	int q = (int)sqrt((double)N);
	int i, j, num = 0;
	for (i = 2; i <= q; ++i){
		if (!B_arry[i].a){
			for (j = i * i; j <= N; j += i){
				B_arry[j].a = 1;
			}
		}
	}
	for (i = 2; i <= N; ++i){
		if (!B_arry[i].a){
			++num;
		}
	}
	return num;
}
*/


//		2016/10/27   得到字符数组的第n个元素的第m位的值 元素从1开始算   12:11模块通过测试
inline int Get_Cn_Nm(const unsigned char *a,int n,int m)
{
	int Change_Times = 8 - m;
	int answer = 0;

	answer = (a[n - 1] >> Change_Times) % 2;
	return answer;
}

//      2016/10/27   给字符数组的第n个元素的第m位赋1 元素从1开始算      12:16模块通过测试
inline void Enter_Cn_Nm(unsigned char *a, int n, int m)
{
	int temp = 128;  //10000000B
	int Change_Times = m - 1;

	a[n - 1] |= (temp >> Change_Times);
}

inline int Read(const unsigned char *a,int i)      //读取字面值的大小的值比如字面值2代表了第1个元素的第三个单元   1016/10/27  12:33模块通过测试
{
	int n_arr;   //第n个元素
	int m_bit;   //第m个bit

	n_arr = (i / 8) + 1;
	m_bit = (i % 8) + 1;

	return Get_Cn_Nm(a,n_arr,m_bit);
}

inline void Write(unsigned char *a, int i)	        //写入字面值的大小的值比如字面值2代表了第1个元素的第三个单元
{
	int n_arr;   //第n个元素
	int m_bit;   //第m个bit

	n_arr = (i / 8) + 1;
	m_bit = (i % 8) + 1;

	Enter_Cn_Nm(a,n_arr,m_bit);
}

 int YorN(int num)  //判断7位数是不是一个幸运数  返回1表示是一个幸运数 返回0表示不是     2016/10/27  14/41模块通过测试
{
	int len = 7;  //幸运数一定是一个7位的
	int tmp = num;
	int text = 0;
	int flag1 = 0;   //开头第一个数字是重复次数多的数字时的标志
	int flag2 = 0;   //开头第一个数字不是重复次数多的数字式的标志

	int * P_i = (int *)malloc(len*sizeof(int));   //要记得释放元素，避免内存泄漏

	for (int i = 0; i < len; i++)    //将每一位存进去
	{
		*(P_i + i) = tmp % 10;
		//printf("%d\n", tmp % 10);
		tmp = tmp / 10;
	}

	text = P_i[0];

	for (int i = 0; i < len;i++)
	{
		if (text == P_i[i])
		{
			flag1++;
		}
	}

	if (flag1 == 6)
	{
		free(P_i);
		return 1;
	}

	text = P_i[1];

	for (int i = 0; i < len;i++)
	{
		if (text == P_i[i])
		{
			flag2++;
		}
	}
	if (flag2 == 6)
	{
		free(P_i);
		return 1;
	}

	free(P_i);
	return 0;
}

//    2016/10/27        采用同样的算法,同样返回素数的数目    2016/10/27  13:49模块通过测试
int E_Judge( unsigned char *a)
{
	int t = (int)sqrt((double)N2);
	int num = 0;    //素数的个数
	int i = 0;		//计数单元1
	int j = 0;		//计数单元二
	int Y_num = 0;

	for (i = 2; i <= t; ++i)
	{
		if (!Read(a,i))
		{
			for (j = i * i; j <= N2; j += i)
			{
				Write(a,j);
			}
		}
	}

	for (i = 2; i <= N2; ++i)
	{
		if (!Read(a,i))
		{
			++num;
		}
	}

	return num;
}


int E_Judge2(unsigned char *a)
{
	int Y_num = 0;

	for (int i = 1000000; i < 9999999; i++)
	{
		if (!Read(a, i))
		{
			if (YorN(i))
			{
				printf("%d   ", i);
				if (Y_num % 6 == 0)
					printf("\n");
				Y_num++;
			}
		}
	}
	printf("\n");
	return Y_num;
}

int main()
{
	clock_t start;    //记住运行时间
	start = clock();

	int num = E_Judge(B_arry);


	printf("幸运数的数目为：%d\n", E_Judge2(B_arry));

	printf("一共有：%d个素数在1——1000万内\n", num);


	printf("程序平均用时：%.3lf seconds\n",(double)(clock() - start)/CLOCKS_PER_SEC);

	printf("使用空间大小：%.2lf\MBYTE\n",1250000.0*(double)sizeof(char)/1000000);

}
